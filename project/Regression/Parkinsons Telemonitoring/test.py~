import numpy as np
from sklearn.preprocessing import Imputer
import re

np.set_printoptions(threshold='nan')
f = open('parkinsons_updrs.data', 'r')
data = []
answer = []
f.readline()
for line in f:
        #line = line.replace("?","NaN");
        line = line.replace("\n","");
	#print line.split(" ")[0:6]
        data.append( [  float(n) for n in re.split(",",line.strip())[1:22]]);
	#print re.split("[ ]+",line)[-1:][0]        
	answer.append(float( re.split(",",line.strip())[-1:][0]))
        

#imp = Imputer(missing_values='NaN', strategy='mean', axis=0)
nparray = np.array(data)
#imp.fit(nparray)
#nparray_new = imp.transform(nparray)

from sklearn.cross_validation import train_test_split 
train_set_X, test_set_X, train_set_y, test_set_y = train_test_split(nparray, answer, test_size=0.2, random_state=42)

#Finished reading the data ... 
#need to train on train_imp data

#from sklearn.linear_model import LinearRegression
#model = LinearRegression(fit_intercept=False)

from sklearn import tree
model = tree.DecisionTreeRegressor()

#from sklearn import linear_model
#model = linear_model.BayesianRidge()

#from sklearn import gaussian_process
#model = gaussian_process.GaussianProcess()

model.fit(train_set_X,train_set_y)

y_pred = model.predict(test_set_X)

from sklearn.metrics import mean_absolute_error
print "Mean Absolute Error :"
print(mean_absolute_error(test_set_y, y_pred))
